0b111111111111111111111,
0b100000000010000000001,
0b101110111010111011101,
0b101010101010101010101,
0b101110111010111011101,
0b100000000000000000001,
0b101110101111101011101,
0b101110101111101011101,
0b100000100010001000001,
0b111110111010111011111,
0b000010100000001010000,
0b000010101101101010000,
0b111110101000101011111,
0b000000001000100000000,
0b111110101111101011111,
0b000010100000001010000,
0b000010101111101010000,
0b111110101111101011111,
0b100000000010000000001,
0b101110111010111011101,
0b100010000000000010001,
0b111010101111101010111,
0b111010101111101010111,
0b100000100010001000001,
0b101111111010111111101,
0b100000000000000000001,
0b111111111111111111111 

{'▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩'}
{'▩''.''.''.''.''.''.''.''.''.''▩''.''.''.''.''.''.''.''.''.''▩'}
{'▩''.''▩''▩''▩''.''▩''▩''▩''.''▩''.''▩''▩''▩''.''▩''▩''▩''.''▩'}
{'▩''.''▩''_''▩''.''▩''_''▩''.''▩''.''▩''_''▩''.''▩''_''▩''.''▩'}
{'▩''.''▩''▩''▩''.''▩''▩''▩''.''▩''.''▩''▩''▩''.''▩''▩''▩''.''▩'}
{'▩''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''▩'}
{'▩''.''▩''▩''▩''.''▩''.''▩''▩''▩''▩''▩''.''▩''.''▩''▩''▩''.''▩'}
{'▩''.''▩''▩''▩''.''▩''.''▩''▩''▩''▩''▩''.''▩''.''▩''▩''▩''.''▩'}
{'▩''.''.''.''.''.''▩''.''.''.''▩''.''.''.''▩''.''.''.''.''.''▩'}
{'▩''▩''▩''▩''▩''.''▩''▩''▩''_''▩''_''▩''▩''▩''.''▩''▩''▩''▩''▩'}
{'_''_''_''_''▩''.''▩''_''_''_''_''_''_''_''▩''.''▩''_''_''_''_'}
{'_''_''_''_''▩''.''▩''_''▩''▩''_''▩''▩''_''▩''.''▩''_''_''_''_'}
{'▩''▩''▩''▩''▩''.''▩''_''▩''_''_''_''▩''_''▩''.''▩''▩''▩''▩''▩'}
{'_''_''_''_''_''.''_''_''▩''_''_''_''▩''_''_''.''_''_''_''_''_'}
{'▩''▩''▩''▩''▩''.''▩''_''▩''▩''▩''▩''▩''_''▩''.''▩''▩''▩''▩''▩'}
{'_''_''_''_''▩''.''▩''_''_''_''_''_''_''_''▩''.''▩''_''_''_''_'}
{'_''_''_''_''▩''.''▩''_''▩''▩''▩''▩''▩''_''▩''.''▩''_''_''_''_'}
{'▩''▩''▩''▩''▩''.''▩''_''▩''▩''▩''▩''▩''_''▩''.''▩''▩''▩''▩''▩'}
{'▩''.''.''.''.''.''.''.''.''.''▩''.''.''.''.''.''.''.''.''.''▩'}
{'▩''.''▩''▩''▩''.''▩''▩''▩''.''▩''.''▩''▩''▩''.''▩''▩''▩''.''▩'}
{'▩''.''.''.''▩''.''.''.''.''.''_''.''.''.''.''.''▩''.''.''.''▩'}
{'▩''▩''▩''.''▩''.''▩''.''▩''▩''▩''▩''▩''.''▩''.''▩''.''▩''▩''▩'}
{'▩''▩''▩''.''▩''.''▩''.''▩''▩''▩''▩''▩''.''▩''.''▩''.''▩''▩''▩'}
{'▩''.''.''.''.''.''▩''.''.''.''▩''.''.''.''▩''.''.''.''.''.''▩'}
{'▩''.''▩''▩''▩''▩''▩''▩''▩''.''▩''.''▩''▩''▩''▩''▩''▩''▩''.''▩'}
{'▩''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''.''▩'}
{'▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩''▩'}

    p1 = ...  # the position of the card after the first round
    p2 = ...  # the position of the card after the second round
    p3 = ...  # the position of the card after the last round
	 
    i = np.argwhere(np.array(c)==picked_card)[0][0]
    p1 = ch*(nh//2)
    p2 = i//nh
    p3 = p1+p2


def make_heaps(c, n_heaps=3):
    assert n_heaps%2==1, "must have an odd number of heaps"
    assert len(c)%n_heaps==0, "the length of the deck must be a multiple of the number of heaps"
    h = [... for i in range(n_heaps)] 
    for i in range(n_heaps):
        for j in range(len(c)//n_heaps):
            h[i].append(j)
    
    return h